#include "pch.h"
#include<iostream>
#include<conio.h>
#include<vector>
using namespace std;
using namespace System;
#include "LLanta.h"
#include "Carro.h"
#include "Competencia.h"
#include "Chasis.h"

int main()
{
    Competencia* competencia = new  Competencia();
    srand(time(0));
    bool iniciar = false;
    while (true) {
        competencia->borrar();
        if (_kbhit()) {
            char tecla = _getch();
            if (tecla == 'g' || tecla == 'G') {
                iniciar = true;
          }
        }
        if (iniciar) {
            competencia->mover();
        }
        competencia->dibujarCarros();
        _sleep(100);
    }
    _getch();
    return 0;
}



#pragma once
#include "Chasis.h"
#include "Llanta.h"

class Carro
{
public:
	Carro(int x,int y,int color){
		this->x = x;
		this->y = y;
		dx = rand() % 4 + 1;
		llantas.push_back(new LLanta(x, y-1, color,dx));
		llantas.push_back(new LLanta(x, y+2, color,dx));
		llantas.push_back(new LLanta(x+2, y-1, color,dx));
		llantas.push_back(new LLanta(x+2, y+2, color,dx));
		chasis = new Chasis(x, y, color);
	}
	~Carro(){}
	void dibujar() {
		
	
		chasis->dibujar();

		for (int i = 0; i < llantas.size(); i++) {
			llantas[i]->dibujar();
		}
	}
	void mover() {

		x += dx;
		for (int i = 0; i < llantas.size(); i++) {
			llantas[i]->mover();
		}

		chasis->mover(x, y);
	}
	void borrar() {
		for (int i = 0; i < llantas.size(); i++) {
			llantas[i]->borrar();
		}
		chasis->borrar();
	}
	int getX() {
		return x;
	}
private:
	int x, y;
	int dx;
	int color;
	vector<LLanta*>llantas;
	Chasis* chasis;
};


#pragma once
class Chasis
{
public:
	Chasis(int x,int y,int color){
		this->x = x;
		this->y = y;
		this->color = color;
	}
	~Chasis(){}
	void dibujar() {
		Console::SetCursorPosition(x, y);
		switch (color)
		{
		case 1: Console::ForegroundColor = ConsoleColor::Red; break;
		case 2: Console::ForegroundColor = ConsoleColor::White; break;
		case 3: Console::ForegroundColor = ConsoleColor::Green; break;
		}
		cout << char(220)<< char(220)<< char(220);
	}
	void borrar() {
		Console::SetCursorPosition(x, y);
		cout << "   ";
	}
	void mover(int x, int y) {
		this->x = x;
		this->y = y;
	}
private:
	int x, y;
	int color;
};



#pragma once
#include "Carro.h"
class Competencia
{
public:
	Competencia(){
		carros.push_back(new Carro(3, 10, 1));
		carros.push_back(new Carro(3, 17, 2));
		carros.push_back(new Carro(3, 24, 3));
		autoGanador = 0;
	}
	~Competencia(){}
	void dibujarCarros() {
		for (int i = 0; i < carros.size(); i++) {
			carros[i]->dibujar();
		}
		if (autoGanador != 0) {
			Console::SetCursorPosition(80, 28);
			cout << "El auto ganador es numero " << autoGanador;
		}
	}
	void mover() {
		for (int i = 0; i < carros.size() && autoGanador==0; i++) {
			carros[i]->mover();
			if (carros[i]->getX()>110) {
				autoGanador = i+1;
			}
		}
	}
	void borrar() {
		for (int i = 0; i < carros.size(); i++) {
			carros[i]->borrar();
		}
	}
private:
	vector<Carro*> carros;
	int autoGanador;
};

#pragma once
class LLanta
{
public:
	LLanta(int x,int y, int color, int dx){
		this->x = x;
		this->y = y;
		this->dx = dx;
		this->color = color;
	}
	~LLanta(){}
	void dibujar() {
		Console::SetCursorPosition(x, y);
		switch (color)
		{
		case 1: Console::ForegroundColor = ConsoleColor::Red; break;
		case 2: Console::ForegroundColor = ConsoleColor::White; break;
		case 3: Console::ForegroundColor = ConsoleColor::Green; break;
		}
		cout << char(219);

		
		
	}
	void borrar() {
		Console::SetCursorPosition(x, y);
		cout << " ";
	}
	void mover() {
		x += dx;
	}
private:
	int dx;
	int x, y;
	int color;
};
