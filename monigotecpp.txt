#pragma once
class Entidad
{
public:
	Entidad(){}
	~Entidad(){}
	int getY() { return y; }
	int getDy() { return dy; }
protected:
	int x, y;
	int ancho, alto;
	int dx, dy;
};




#pragma once
#include "Entidad.h"
class Estrella:public Entidad
{
public:
	Estrella(){
		x = rand() % 100 + 1;
		y = 0;
		dy = rand()%5+1;
	}
	~Estrella(){}
	void dibujar() {
		Console::SetCursorPosition(x, y);
		cout << "*";
	}
	void borrar() {
		Console::SetCursorPosition(x, y);
		cout << " ";
	}
	void mover() {
		y += dy;
	}
private:

};





#pragma once
class Monigote: public Entidad
{
public:
	Monigote(){
		x = 40;
		y = 26;
		dx = 0;
	}
	~Monigote(){}
	void dibujar() {
		Console::SetCursorPosition(x, y);
		cout << char(64);
		Console::SetCursorPosition(x, y + 1);
		cout << char(197);
	}
	void mover() {
		if (_kbhit()) {
			char tecla = _getch();
			switch (tecla)
			{
			case 'a': dx = -1; break;
			case 'd': dx = 1; break;
			}
			x += dx;
		}
	}
	void borrar() {
		Console::SetCursorPosition(x, y);
		cout << " ";
		Console::SetCursorPosition(x, y + 1);
		cout << " ";
	}


};


#pragma once
class Juego
{
public:
	Juego(){
	
		monigote = new Monigote();
		tiempoCaida = 0;
	}
	~Juego(){}
	void iniciar() {
		while (true) {
			borrar();

			agregarEstrellas();
			verificarBordes();

			mover();
			dibujar();
			_sleep(100);
		}
	}
	void dibujar() {
		for (int i = 0; i < estrellas.size(); i++) {
			estrellas[i]->dibujar();
		}
		monigote->dibujar();
	}
	void mover() {
		for (int i = 0; i < estrellas.size(); i++) {
			estrellas[i]->mover();
		}
		monigote->mover();
	}
	void borrar() {
		for (int i = 0; i < estrellas.size(); i++) {
			estrellas[i]->borrar();
		}
		monigote->borrar();
	}
	void agregarEstrellas() {
		if (tiempoCaida % 20 == 0) {
			estrellas.push_back(new Estrella());
			tiempoCaida = 0;
		}
		tiempoCaida++;
	}
	void verificarBordes() {
		for (int i = 0; i < estrellas.size(); i++) {
			if (estrellas[i]->getY() + estrellas[i]->getDy() > 28) {
				estrellas.erase(estrellas.begin() + i);
			}
		}
	}
private:
	Monigote* monigote;
	vector<Estrella*>estrellas;
	int tiempoCaida;
};




#include "pch.h"
#include<iostream>
#include<conio.h>
#include<vector>
using namespace std;
using namespace System;
#include "Entidad.h"
#include "Monigote.h"
#include "Estrella.h"
#include "Juego.h"
int main()
{
    Juego* juego = new Juego();
    juego->iniciar();
    return 0;
}
